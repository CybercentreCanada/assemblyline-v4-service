# Name of the service
name: ResultSample
# Version of the service
version: $SERVICE_TAG
# Description of the service
description: >
  ALv4 Result example service

  This service provides examples of how to:
     - define your service manifest
     - use the different section types
     - use tags
     - use heuristics to score sections
     - use the att&ck matrix
     - use the updater framework
     - define submission parameters
     - define service configuration parameters

# Regex defining the types of files the service accepts and rejects
accepts: .*
rejects: empty|metadata/.*

# At which stage the service should run (one of: FILTER, EXTRACT, CORE, SECONDARY, POST)
# NOTE: Stages are executed in the order defined in the list
stage: CORE
# Which category the service is part of (one of: Antivirus, Dynamic Analysis, External, Extraction, Filtering, Networking, Static Analysis)
category: Static Analysis

# Does the service require access to the file to perform its task
# If set to false, the service will only have access to the file metadata (e.g. Hashes, size, type, ...)
file_required: true
# Maximum execution time the service has before it's considered to be timed out
timeout: 10
# Does the service force the caching of results to be disabled
# (only use for service that will always provided different results each run)
disable_cache: false

# is the service enabled by default
enabled: true
# does the service make APIs call to other product not part of the assemblyline infrastructure (e.g. VirusTotal, ...)
is_external: false
# Number of concurrent services allowed to run at the same time
licence_count: 0

# service configuration block (dictionary of config variables)
# NOTE: The key names can be anything and the value can be of any types
config:
  str_config: value1
  int_config: 1
  list_config: [1, 2, 3, 4]
  bool_config: false

# submission params block: a list of submission param object that define parameters
#                          that the user can change about the service for each of its scans
# supported types: bool, int, str, list
submission_params:
  - default: ""
    name: password
    type: str
    value: ""
  - default: false
    name: extra_work
    type: bool
    value: false

# Service heuristic blocks: List of heuristics object that define the different heuristics used in the service
heuristics:
  - description: This suspicious heuristic fakes making as a PDF
    filetype: "*"
    heur_id: 1
    name: Masks has PDF
    score: 10
    # Even if a signature fires multiple time, this is the max score for a section
    max_score: 1000
  - description: This malicious heuristic fakes dropping and side-loading a DLL and has an Att&ck ID associated with it
    filetype: "*"
    heur_id: 2
    name: Drops an exe
    score: 1000
    attack_id: T1073
  - description: This informational heuristic fakes extracting a configuration block
    filetype: "*"
    heur_id: 3
    name: Extraction config information
    score: 10
    # if a signature is associated to this heuristic and is present in that map it gets a different score
    signature_score_map:
      sig_three: 30
      sig_four: 40
  - description: This suspicious heuristic fakes decoding a configuration block and has an Att&ck ID associated with it
    filetype: "*"
    heur_id: 4
    name: Config decoding
    score: 100
    attack_id: [T1027, T1127]
  - description: This suspicious heuristic fakes an high entropy pe section
    filetype: "*"
    heur_id: 5
    name: High entropy PE section
    score: 100

# Docker configuration block which defines:
#  - the name of the docker container that will be created
#  - cpu and ram allocation by the container
docker_config:
  image: cccs/assemblyline-service-resultsample:$SERVICE_TAG
  cpu_cores: 1.0
  ram_mb_min: 128
  ram_mb: 256

# Dependencies configuration block
dependencies:
  updates:
    container:
      allow_internet_access: true
      command: ["python", "-m", "update_server"]
      image: ${REGISTRY}cccs/assemblyline-service-resultsample:$SERVICE_TAG
      ports: ["5003"]
      # Defines resource limits, adjust based on sources to avoid OOM during runtime
      # cpu_cores: 2 (default: 1)
      # ram_mb: 4096 (default: 512)
    run_as_core: True

# Update configuration block
update_config:
  # list of source object from where to fetch files for update and what will be the name of those files on disk
  sources:
    - uri: https://file-examples.com/wp-content/uploads/2017/02/zip_2MB.zip
      name: sample_2mb_file
    - uri: https://file-examples.com/wp-content/uploads/2017/02/zip_5MB.zip
      name: sample_5mb_file
  # interval in seconds at which the updater dependency runs
  update_interval_seconds: 300
  # Should the downloaded files be used to create signatures in the system
  generates_signatures: false
